package chess

import kotlin.math.abs

const val CELLS = 8 //размеры поля
const val BLACK = 'B'
const val WHITE = 'W'

private lateinit var whitePlayerName: String
private lateinit var blackPlayerName: String
private var isWhiteMove = true

fun main() {
    prepareGame()
    playGame()
}

fun prepareGame() {
    println("Pawns-Only Chess")
    println("First Player's name:")
    whitePlayerName = readln()
    println("Second Player's name:")
    blackPlayerName = readln()
    fillEmptyField()
    fillPawnsField(Field.white, 2, WHITE)
    fillPawnsField(Field.black, 7, BLACK)
    printField()
    println()
}

fun playGame() {
    while (true) {
        println("${if (isWhiteMove) whitePlayerName else blackPlayerName}'s turn:")
        val enter = readln()
        if (enter == "exit") {
            println("Bye!")
            break
        }
        if (!checkIsPawnInStart(enter)) continue
        if (!checkIsMovePossible(enter)) {
            println("Invalid Input")
            continue
        } else {
            pawnMove(enter)
            printField()
            isWhiteMove = !isWhiteMove
        }
    }
}

//проверка, находится ли в исходной клетке пешка игрока
fun checkIsPawnInStart(move: String): Boolean {
    if (!checkIsCellOccupied(Pair(move[0], move[1].digitToInt()), if (isWhiteMove) "white" else "black")) {
        println("No ${if (isWhiteMove) "white" else "black"} pawn at ${move[0]}${move[1]}")
        return false
    }
    return true
}


//проверка, можно ли выполнить ход
fun checkIsMovePossible(move: String): Boolean {
    if (!move.matches("[a-h][1-8][a-h][1-8]".toRegex())) return false //проверка цифр и букв, что они в пределах поля и их 4
    if (move[0] == move[2]) { //если ход прямой
        if (!checkIsStraightMovePossible(move)) return false
    } else {
        return false
    }
    return true
}

fun checkIsStraightMovePossible(move: String): Boolean {
    val numberOfCell = abs(move[3].digitToInt() - move[1].digitToInt()) //на сколько клеток двигается пешка
    if (isWhiteMove && move[3].digitToInt() - move[1].digitToInt() < 0 ||
        !isWhiteMove && move[3].digitToInt() - move[1].digitToInt() > 0) return false //проверка, что пешка не идет назад
    val nextCell = if (isWhiteMove) 1 else -1
    val startPosition = if (isWhiteMove) 2 else 7
    when (numberOfCell) {
        1 -> {  //проверка не находится ли пешка в клетке назначения
            if (checkIsCellOccupied(Pair(move[0], move[1].digitToInt() + nextCell), "white") ||
                checkIsCellOccupied(Pair(move[0], move[1].digitToInt() + nextCell), "black")) return false
        }
        2 -> {
            if (move[1].digitToInt() != startPosition) return false
            //проверка не находится ли пешка в клетке назначения
            if (checkIsCellOccupied(Pair(move[0], move[1].digitToInt() + nextCell), "white") ||
                checkIsCellOccupied(Pair(move[0], move[1].digitToInt() + nextCell), "black") ||
                checkIsCellOccupied(Pair(move[0], move[1].digitToInt() + nextCell * 2), "white") ||
                checkIsCellOccupied(Pair(move[0], move[1].digitToInt() + nextCell * 2), "black")
            ) return false
        }
        else -> return false //проверка что длина хода не больше 2 и не равна 0
    }
    return true
}

//проверка, находится в данном поле пешка нужного игрока
fun checkIsCellOccupied(cell: Pair<Char, Int>, player: String): Boolean {
    return when(player) {
        "white" -> Field.white.contains(cell)
        else -> Field.black.contains(cell)
    }
}

// пешка ходит. Ее предыдущие координаты удаляются, новые добавляются.
fun pawnMove(move: String) {
    val fromCell = Pair(move[0], move[1].digitToInt())
    val toCell = Pair(move[2], move[3].digitToInt())
    val pawns = if (isWhiteMove) Field.white else Field.black
    val pawn = if (isWhiteMove) WHITE else BLACK
    pawns.remove(fromCell) //удаление координат пешки из списка пешек (откуда ходила)
    pawns.add(toCell) //добавление координат пешки в список пешек (куда пошла)
    Field.field[convertRowToVert(fromCell.second)][convertColToHor(fromCell.first)] = ' '//удаление пешки с поля
    Field.field[convertRowToVert(toCell.second)][convertColToHor(toCell.first)] = pawn //добавление пешки на доску
}

//заполнение поля без пешек
fun fillEmptyField() {
    for (v in 0 until Field.field.size) {
        for (h in 0 until Field.field[v].size) {
            if (v % 2 == 0 && (h + 2) % 4 == 0) Field.field[v][h] = '+'
            if (v % 2 != 0 && v < Field.field.size - 1 && (h + 2) % 4 == 0) Field.field[v][h] = '|'
            if (v % 2 == 0 && h > 2 && (h + 2) % 4 != 0) Field.field[v][h] = '-'
            if (v % 2 != 0 && v < Field.field.size - 1 && h == 0) Field.field[v][0] = convertVertToRow(v).digitToChar()
            if (v == Field.field.size - 1 && h > 0 && h % 4 == 0) Field.field[v][h] = convertHorToCol(h)
        }
    }
}

//конвертация координаты "y" в № строки
fun convertVertToRow(vert: Int): Int = CELLS - ((vert + 1) / 2 - 1)

//конвертация № строки в координату "y".
fun convertRowToVert(row: Int): Int = (CELLS + 1 - row) * 2 - 1

//конвертация координаты "x" в буквенный столбец
fun convertHorToCol(hor: Int): Char = 'a' + (hor - 1) / 4

//конвертация буквенного столбца в координату "x"
fun convertColToHor(col: Char): Int {
    val symbol = if (col == 'a') 1 else (col.code - 'a'.code + 1)
    return symbol * 4
}

//добавление начального расположения пешек
fun fillPawnsField(pawns: MutableList<Pair<Char, Int>>, row: Int, pawn: Char) {
    val v = convertRowToVert(row)
    for (i in 0 until CELLS) {
        pawns.add(Pair('a' + i, row))
        Field.field[v][4 * (i + 1)] = pawn
    }
}

//печать поля
fun printField() {
    for (i in Field.field) {
        for (j in i) {
            print(j)
        }
        println()
    }
}


object Field {
    val field = Array(CELLS * 2 + 2) {Array( CELLS * 4 + 3) {' '} }
    val white = mutableListOf<Pair<Char, Int>>() //белые пешки
    val black = mutableListOf<Pair<Char, Int>>() //черные пешки
}
